#!/bin/bash

# This script assumes the following environment variables have been set:
# REPO_KEY: a base64 encoded private key used to access the core repository. Obtain with: base64 [privatekey] | tr -d '\n'
# REPO_ENV: the environment of the container, used to create the name of the tarball. i.e., load, dev, qa, prod
# REPO_HOST: the host of the repository. should include username, user@host style for ssh

# Globals
PROG_NAME=$(basename "$0")
REPO_KEY_PATH=/tmp/.ssh/
REPO_KEY_FILE=${REPO_KEY_PATH}/repo_key
REPO_REMOTE_PATH=${REPO_REMOTE_PATH}
SWAP_CONFIRM=1

# Generic function definitions
function log() {
	echo "*** ${1} ***"
}

function remotecmd() {
	ssh -i $REPO_KEY_FILE \
		-o "StrictHostKeyChecking No" \
		-o "UserKnownHostsFile $REPO_KEY_PATH/known_hosts" \
		"$REPO_HOST" "$@"
}

function confirm() {
	# call with a prompt string or use a default
	read -r -p "${1:-Are you sure? [y/N]} " response
	case "$response" in
		[yY][eE][sS] | [yY])
			true
			;;
		*)
			false
			;;
	esac
}

function rmsuffix() {
	REGEX='s/^([a-z0-9]+_[a-z_]*_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}.[0-9]{2}).*/\1/'
	echo "$@" | sed -E "${REGEX}"
}

# Solr functions
function solr_query() {
	curl -s "http://solr:8983/solr/admin/cores?${1}"
}

function solr_create() {
	API_CREATE="action=CREATE&config=solrconfig.xml&schema=schema.xml"
	RESPONSE=$(solr_query "${API_CREATE}&name=${1}&instanceDir=${2}&dataDir=${2}/data")

	if [ ! "$(echo "$RESPONSE" | jq .responseHeader.status)" -eq 0 ]; then
		log "ERROR CREATING SOLR CORE: ${1}"
		echo "${RESPONSE}" | jq
		exit 1
	fi
}

function solr_core_info() {
	VALUE=$(echo "${1}" | jq -r ".status[ .status | keys[0] ].${2}")
	[ -z ${3+x} ] && KEY="$2" || KEY="$3"
	echo "$KEY: $VALUE"
}

function solr_status() {
	solr_query "action=STATUS&core=${1}"
}

function solr_info() {
	RESPONSE=$(solr_status "$1")
	solr_core_info "$RESPONSE" name
	solr_core_info "$RESPONSE" instanceDir
	solr_core_info "$RESPONSE" startTime
	solr_core_info "$RESPONSE" index.size size
}

function solr_cores() {
	SOLR_LIST=$(solr_query | jq -r '.status[].name')
	if [ $# -eq 1 ]; then
		CORE_NAME="$1"
		echo "${SOLR_LIST}" | grep "$CORE_NAME"
	else
		echo "$SOLR_LIST"
	fi
}

function solr_swap() {
	CORE_NAME="${1}"
	TAR_NAME="${2}"
	solr_query "action=SWAP&core=${TAR_NAME}&other=${CORE_NAME}"
}

# takes filename or core instance dir format and returns the corename.  Works
# for a single line, or multiple lines
function extract_corename() {
	while read -r line; do
		sed -E 's/[a-z0-9]+_([a-z_]*)_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}.[0-9]{2}.*/\1/' <<<"$line"
	done
}

# sub_command function definitions
function sub_help() {
	echo -e "\nUsage:\t$PROG_NAME push corename"
	echo -e "\t  or $PROG_NAME pull [latest] [corename | tarfile]"
	echo -e "\t  or $PROG_NAME swap [latest | corename] [coreinstance]"
	echo -e "\t  or $PROG_NAME list [corename]"
	echo -e "\t  or $PROG_NAME cores"
	echo -e "\t  or $PROG_NAME help"
	echo
	echo -e "\tPush or pull in Solr cores by using tar and ssh to archive and transfer\n"
	echo -e "\tFormat for the remote name is: ENVIRONMENT_CORENAME_DATESTAMP.tar.gz (DATESTAMP is YYYY-MM-DD_HH.MM)"
	echo -e "\tNOTE: Acts on the core *name* not on the instanceDir.  Solr is queried to find the instanceDir\n"
}

function sub_push() {
	CORE_NAME=$1

	if [ "$CORE_NAME" == "" ]; then
		log "Core name is required!"
		sub_help
		exit 1
	fi

	# Find instanceDir for core
	SOLR_OUTPUT=$(solr_status "${CORE_NAME}")
	INSTANCE_OUTPUT="$(solr_core_info "$SOLR_OUTPUT" instanceDir)"
	INSTANCE_DIR=$(echo "$INSTANCE_OUTPUT" | awk '{print $2}')
	log "${INSTANCE_OUTPUT}"

	if [ "$INSTANCE_DIR" == "" ]; then
		log "core not found in solr!"
		exit 1
	fi

	if [ ! -d "$INSTANCE_DIR" ]; then
		log "ERROR: \"${CORE_NAME}\" does not exist!"
		echo "Available cores:"
		solr_cores
		sub_help
		exit 1
	fi

	DATESTAMP=$(date +"%F_%H.%M")
	REMOTE_NAME="${REPO_REMOTE_PATH}/${REPO_ENV}_${CORE_NAME}_${DATESTAMP}.tar.gz"
	log "pushing ${CORE_NAME} (${INSTANCE_DIR}) to ${REPO_HOST} as ${REMOTE_NAME}"
	tar -C "${INSTANCE_DIR}" -czf - . | remotecmd "cat > $REMOTE_NAME"
}

# the cores function returns the currently loaded cores and their instance dirs
function sub_cores() {
	printf "Name\tDir\n"
	for core in $(solr_cores); do
		RESPONSE=$(solr_status "$core")
		name=$(jq -r ".status[ .status | keys[0] ].name" <<<"$RESPONSE")
		instanceDir=$(jq -r ".status[ .status | keys[0] ].instanceDir" <<<"$RESPONSE")
		printf "%s\t%s\n" "$name" "$instanceDir"
	done

}

function sub_list() {
	REMOTE_OUTPUT=$(remotecmd "ls -ltr $REPO_REMOTE_PATH")
	REMOTE_LIST=$(echo "$REMOTE_OUTPUT" | grep -e ^- | awk '{print substr($0, index($0, $5))}')

	if [ $# -eq 1 ]; then
		CORE_NAME="$1"
		echo "$REMOTE_LIST" | grep "$CORE_NAME"
	else
		echo "$REMOTE_LIST"
	fi
}

function sub_pull() {
	# Pull latest core or was it manually selected?
	if [ "$1" == "latest" ]; then
		if [ $# -eq 2 ]; then
			CORE_NAME="$2"
			TAR_LIST=$(sub_list "$CORE_NAME")
			TAR_FILENAME=$(echo "$TAR_LIST" | tail -n1 | awk '{print $5}')
		else
			log "Core name is required!"
			sub_help
			exit 1
		fi
	else
		if [ $# -eq 1 ]; then
			TAR_LIST=$(sub_list)
			TAR_FILENAME="$1"
		else
			log "Core name is required!"
			sub_help
			exit 1
		fi
	fi

	# Check if core exists
	if [ -n "${CORE_NAME}" ] && [ -z "${TAR_LIST}" ]; then
		log "core \"${CORE_NAME}\" does not exist"
		echo "Available core names to pull \"latest\" from:"
		sub_list | extract_corename | sort | uniq
		exit 1
	elif [ -z "$(echo "${TAR_LIST}" | awk '{print $5}' | grep -x "${TAR_FILENAME}")" ]; then
		log "Manual selection \"${TAR_FILENAME}\" does not exist"
		echo "Available cores to pull:"
		echo "${TAR_LIST}" | awk '{print $5}'
		exit 1
	fi

	# Prompt user to verify autoselected core
	if [ -n "${CORE_NAME}" ]; then
		if ! confirm "Pull ${TAR_FILENAME}? [y/N]"; then
			log "pull action aborted by user"
			exit 1
		fi
	fi

	# Remove .tar.gz suffix
	LOCAL_CORE_NAME=$(rmsuffix "${TAR_FILENAME}")
	DEST_DIR=${SOLR_HOME}/${LOCAL_CORE_NAME}

	# Pull down archive and extract
	if [ ! -d "${DEST_DIR}" ]; then
		log "pulling ${TAR_FILENAME} and expanding in ${DEST_DIR}"
		mkdir "$DEST_DIR" || exit 1
		remotecmd "cat ${REPO_REMOTE_PATH}/${TAR_FILENAME}" | tar -C "${DEST_DIR}" -xzf - .
	else
		log "Core \"${LOCAL_CORE_NAME}\" already exists at ${DEST_DIR}"
		exit 1
	fi

	# Move aside core.properties
	mv "${DEST_DIR}"/core.properties "${DEST_DIR}"/core.properties.crepo

	# Issue create call to solr to load core
	solr_create "${LOCAL_CORE_NAME}" "${DEST_DIR}" &&
		log "core ${LOCAL_CORE_NAME} created:" &&
		solr_info "${LOCAL_CORE_NAME}" &&

		# Optional swap with core just pulled down
		SWAP_CORE_NAME=$(echo "${LOCAL_CORE_NAME}" | extract_corename)

	if confirm "Auto-invoke swapping \"${SWAP_CORE_NAME}\" core with \"${LOCAL_CORE_NAME}\"? [y/N]"; then
		log "Running: $PROG_NAME swap \"${SWAP_CORE_NAME}\" \"${LOCAL_CORE_NAME}\""
		# Prevent double confirm by disabling sub_swap's prompt
		SWAP_CONFIRM=0
		sub_swap "${SWAP_CORE_NAME}" "${LOCAL_CORE_NAME}"
	else
		log "Auto-invoke swapping declined by user"
	fi
}

function sub_swap() {
	# Swap latest core or a manually selected one?
	if [ "$1" == "latest" ]; then
		if [ $# -eq 2 ]; then
			CORE_NAME="$2"

			# solr api query isn't explicitely ordered, but this
			# seems to work.  However, we want to exclude the core
			# name, otherwise the latest can be the same, resulting
			# in a "same swap" attempt
			CORE_LIST=$(solr_cores "${CORE_NAME}" | grep -vx "$CORE_NAME")
			CORE_INSTANCE=$(echo "$CORE_LIST" | tail -n1)
		else
			log "Core name is required!"
			sub_help
			exit 1
		fi
	else
		if [ -n "${1}" ] && [ -n "${2}" ]; then
			CORE_NAME="$1"
			CORE_INSTANCE="$2"
			CORE_LIST=$(solr_cores)
		else
			log "Core name and core instance is required!"
			sub_help
			exit 1
		fi
	fi

	# Check if core exists
	if [ -n "${CORE_NAME}" ] && [ -z "${CORE_LIST}" ]; then
		log "Instance of core \"${CORE_NAME}\" does not exist"
		echo "Available core names to swap \"latest\" from:"
		solr_cores | extract_corename | sort | uniq
		exit 1
	elif ! grep -x "$CORE_INSTANCE" <<<"$CORE_LIST"; then
		log "Manual selection of core \"${CORE_INSTANCE}\" does not exist"
		echo "Available cores to swap:"
		solr_cores
		exit 1
	fi

	# Prompt user to verify selected core
	if [ -n "${CORE_NAME}" ]; then
		if [ "$SWAP_CONFIRM" -eq 1 ]; then
			if ! confirm "Swap \"${CORE_NAME}\" core with \"${CORE_INSTANCE}\"? [y/N]"; then
				log "swap action aborted by user"
				exit 1
			fi
		fi

		RESPONSE=$(solr_swap "${CORE_NAME}" "${CORE_INSTANCE}")
		if [ ! "$(echo "$RESPONSE" | jq .responseHeader.status)" -eq 0 ]; then
			log "ERROR SWAPPING SOLR CORE: ${CORE_NAME}"
			echo "${RESPONSE}" | jq
			exit 1
		else
			log "SUCCESS: swapped ${CORE_NAME} for ${CORE_INSTANCE}"
		fi
	fi
}

# Create key dir/content if needed
[ ! -d "$REPO_KEY_PATH" ] && mkdir -p -m 700 "$REPO_KEY_PATH"
[ ! -s "$REPO_KEY_FILE" ] && echo "$REPO_KEY" | base64 -d >"$REPO_KEY_FILE"
chmod 600 "$REPO_KEY_FILE"

# Main routine
subcommand=$1

case $subcommand in
	"" | "-h" | "--help")
		sub_help
		;;
	*)
		shift
		sub_"${subcommand}" "$@"
		if [ $? = 127 ]; then
			echo "Error: '$subcommand' is not a known subcommand." >&2
			echo "       Run '$PROG_NAME --help' for a list of known subcommands." >&2
			exit 1
		fi
		;;
esac
